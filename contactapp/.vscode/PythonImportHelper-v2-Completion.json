[
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "TextAreaField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Email",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "EqualTo",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "puppycompanyblog",
        "description": "puppycompanyblog",
        "isExtraImport": true,
        "detail": "puppycompanyblog",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "puppycompanyblog",
        "description": "puppycompanyblog",
        "isExtraImport": true,
        "detail": "puppycompanyblog",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "puppycompanyblog",
        "description": "puppycompanyblog",
        "isExtraImport": true,
        "detail": "puppycompanyblog",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "importPath": "puppycompanyblog",
        "description": "puppycompanyblog",
        "isExtraImport": true,
        "detail": "puppycompanyblog",
        "documentation": {}
    },
    {
        "label": "BlogPost",
        "importPath": "puppycompanyblog.models",
        "description": "puppycompanyblog.models",
        "isExtraImport": true,
        "detail": "puppycompanyblog.models",
        "documentation": {}
    },
    {
        "label": "BlogPost",
        "importPath": "puppycompanyblog.models",
        "description": "puppycompanyblog.models",
        "isExtraImport": true,
        "detail": "puppycompanyblog.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "puppycompanyblog.models",
        "description": "puppycompanyblog.models",
        "isExtraImport": true,
        "detail": "puppycompanyblog.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "puppycompanyblog.models",
        "description": "puppycompanyblog.models",
        "isExtraImport": true,
        "detail": "puppycompanyblog.models",
        "documentation": {}
    },
    {
        "label": "BlogPost",
        "importPath": "puppycompanyblog.models",
        "description": "puppycompanyblog.models",
        "isExtraImport": true,
        "detail": "puppycompanyblog.models",
        "documentation": {}
    },
    {
        "label": "BlogPostForm",
        "importPath": "puppycompanyblog.blog_posts.forms",
        "description": "puppycompanyblog.blog_posts.forms",
        "isExtraImport": true,
        "detail": "puppycompanyblog.blog_posts.forms",
        "documentation": {}
    },
    {
        "label": "FileField",
        "importPath": "flask_wtf.file",
        "description": "flask_wtf.file",
        "isExtraImport": true,
        "detail": "flask_wtf.file",
        "documentation": {}
    },
    {
        "label": "FileAllowed",
        "importPath": "flask_wtf.file",
        "description": "flask_wtf.file",
        "isExtraImport": true,
        "detail": "flask_wtf.file",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "importPath": "puppycompanyblog.users.forms",
        "description": "puppycompanyblog.users.forms",
        "isExtraImport": true,
        "detail": "puppycompanyblog.users.forms",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "puppycompanyblog.users.forms",
        "description": "puppycompanyblog.users.forms",
        "isExtraImport": true,
        "detail": "puppycompanyblog.users.forms",
        "documentation": {}
    },
    {
        "label": "UpdateUserForm",
        "importPath": "puppycompanyblog.users.forms",
        "description": "puppycompanyblog.users.forms",
        "isExtraImport": true,
        "detail": "puppycompanyblog.users.forms",
        "documentation": {}
    },
    {
        "label": "add_profile_pic",
        "importPath": "puppycompanyblog.users.picture_handler",
        "description": "puppycompanyblog.users.picture_handler",
        "isExtraImport": true,
        "detail": "puppycompanyblog.users.picture_handler",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BlogPostForm",
        "kind": 6,
        "importPath": "blog_posts.forms",
        "description": "blog_posts.forms",
        "peekOfCode": "class BlogPostForm(FlaskForm):\n    # no empty titles or text possible\n    # we'll grab the date automatically from the Model later\n    title = StringField('Title', validators=[DataRequired()])\n    text = TextAreaField('Text', validators=[DataRequired()])\n    submit = SubmitField('BlogPost')",
        "detail": "blog_posts.forms",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "blog_posts.views",
        "description": "blog_posts.views",
        "peekOfCode": "def create_post():\n    form = BlogPostForm()\n    if form.validate_on_submit():\n        blog_post = BlogPost(title=form.title.data,\n                             text=form.text.data,\n                             user_id=current_user.id\n                             )\n        db.session.add(blog_post)\n        db.session.commit()\n        flash(\"Blog Post Created\")",
        "detail": "blog_posts.views",
        "documentation": {}
    },
    {
        "label": "blog_post",
        "kind": 2,
        "importPath": "blog_posts.views",
        "description": "blog_posts.views",
        "peekOfCode": "def blog_post(blog_post_id):\n    # grab the requested blog post by id number or return 404\n    blog_post = BlogPost.query.get_or_404(blog_post_id)\n    return render_template('blog_post.html',title=blog_post.title,\n                            date=blog_post.date,post=blog_post\n    )\n@blog_posts.route(\"/<int:blog_post_id>/update\", methods=['GET', 'POST'])\n@login_required\ndef update(blog_post_id):\n    blog_post = BlogPost.query.get_or_404(blog_post_id)",
        "detail": "blog_posts.views",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "blog_posts.views",
        "description": "blog_posts.views",
        "peekOfCode": "def update(blog_post_id):\n    blog_post = BlogPost.query.get_or_404(blog_post_id)\n    if blog_post.author != current_user:\n        # Forbidden, No Access\n        abort(403)\n    form = BlogPostForm()\n    if form.validate_on_submit():\n        blog_post.title = form.title.data\n        blog_post.text = form.text.data\n        db.session.commit()",
        "detail": "blog_posts.views",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "blog_posts.views",
        "description": "blog_posts.views",
        "peekOfCode": "def delete_post(blog_post_id):\n    blog_post = BlogPost.query.get_or_404(blog_post_id)\n    if blog_post.author != current_user:\n        abort(403)\n    db.session.delete(blog_post)\n    db.session.commit()\n    flash('Post has been deleted')\n    return redirect(url_for('core.index'))",
        "detail": "blog_posts.views",
        "documentation": {}
    },
    {
        "label": "blog_posts",
        "kind": 5,
        "importPath": "blog_posts.views",
        "description": "blog_posts.views",
        "peekOfCode": "blog_posts = Blueprint('blog_posts',__name__)\n@blog_posts.route('/create',methods=['GET','POST'])\n@login_required\ndef create_post():\n    form = BlogPostForm()\n    if form.validate_on_submit():\n        blog_post = BlogPost(title=form.title.data,\n                             text=form.text.data,\n                             user_id=current_user.id\n                             )",
        "detail": "blog_posts.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def index():\n    '''\n    This is the home page view. Notice how it uses pagination to show a limited\n    number of posts by limiting its query size and then calling paginate.\n    '''\n    page = request.args.get('page', 1, type=int)\n    blog_posts = BlogPost.query.order_by(BlogPost.date.desc()).paginate(page=page, per_page=10)\n    return render_template('index.html',blog_posts=blog_posts)\n@core.route('/info')\ndef info():",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def info():\n    '''\n    Example view of any other \"core\" page. Such as a info page, about page,\n    contact page. Any page that doesn't really sync with one of the models.\n    '''\n    return render_template('info.html')",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "core",
        "kind": 5,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "core = Blueprint('core',__name__)\n@core.route('/')\ndef index():\n    '''\n    This is the home page view. Notice how it uses pagination to show a limited\n    number of posts by limiting its query size and then calling paginate.\n    '''\n    page = request.args.get('page', 1, type=int)\n    blog_posts = BlogPost.query.order_by(BlogPost.date.desc()).paginate(page=page, per_page=10)\n    return render_template('index.html',blog_posts=blog_posts)",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "error_404",
        "kind": 2,
        "importPath": "error_pages.handlers",
        "description": "error_pages.handlers",
        "peekOfCode": "def error_404(error):\n    '''\n    Error for pages not found.\n    '''\n    # Notice how we return a tuple!\n    return render_template('error_pages/404.html'), 404\n@error_pages.app_errorhandler(403)\ndef error_403(error):\n    '''\n    Error for trying to access something which is forbidden.",
        "detail": "error_pages.handlers",
        "documentation": {}
    },
    {
        "label": "error_403",
        "kind": 2,
        "importPath": "error_pages.handlers",
        "description": "error_pages.handlers",
        "peekOfCode": "def error_403(error):\n    '''\n    Error for trying to access something which is forbidden.\n    Such as trying to update someone else's blog post.\n    '''\n    # Notice how we return a tuple!\n    return render_template('error_pages/403.html'), 403",
        "detail": "error_pages.handlers",
        "documentation": {}
    },
    {
        "label": "error_pages",
        "kind": 5,
        "importPath": "error_pages.handlers",
        "description": "error_pages.handlers",
        "peekOfCode": "error_pages = Blueprint('error_pages',__name__)\n@error_pages.app_errorhandler(404)\ndef error_404(error):\n    '''\n    Error for pages not found.\n    '''\n    # Notice how we return a tuple!\n    return render_template('error_pages/404.html'), 404\n@error_pages.app_errorhandler(403)\ndef error_403(error):",
        "detail": "error_pages.handlers",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "users.forms",
        "description": "users.forms",
        "peekOfCode": "class LoginForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    submit = SubmitField('Log In')\nclass RegistrationForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(),Email()])\n    username = StringField('Username', validators=[DataRequired()])\n    password = PasswordField('Password', validators=[DataRequired(), EqualTo('pass_confirm', message='Passwords Must Match!')])\n    pass_confirm = PasswordField('Confirm password', validators=[DataRequired()])\n    submit = SubmitField('Register!')",
        "detail": "users.forms",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "kind": 6,
        "importPath": "users.forms",
        "description": "users.forms",
        "peekOfCode": "class RegistrationForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(),Email()])\n    username = StringField('Username', validators=[DataRequired()])\n    password = PasswordField('Password', validators=[DataRequired(), EqualTo('pass_confirm', message='Passwords Must Match!')])\n    pass_confirm = PasswordField('Confirm password', validators=[DataRequired()])\n    submit = SubmitField('Register!')\n    def validate_email(self, field):\n        # Check if not None for that user email!\n        if User.query.filter_by(email=field.data).first():\n            raise ValidationError('Your email has been registered already!')",
        "detail": "users.forms",
        "documentation": {}
    },
    {
        "label": "UpdateUserForm",
        "kind": 6,
        "importPath": "users.forms",
        "description": "users.forms",
        "peekOfCode": "class UpdateUserForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(),Email()])\n    username = StringField('Username', validators=[DataRequired()])\n    picture = FileField('Update Profile Picture', validators=[FileAllowed(['jpg', 'png'])])\n    submit = SubmitField('Update')\n    def validate_email(self, field):\n        # Check if not None for that user email!\n        if User.query.filter_by(email=field.data).first():\n            raise ValidationError('Your email has been registered already!')\n    def validate_username(self, field):",
        "detail": "users.forms",
        "documentation": {}
    },
    {
        "label": "add_profile_pic",
        "kind": 2,
        "importPath": "users.picture_handler",
        "description": "users.picture_handler",
        "peekOfCode": "def add_profile_pic(pic_upload,username):\n    filename = pic_upload.filename\n    # Grab extension type .jpg or .png\n    ext_type = filename.split('.')[-1]\n    storage_filename = str(username) + '.' +ext_type\n    filepath = os.path.join(current_app.root_path, 'static\\profile_pics', storage_filename)\n    # Play Around with this size.\n    output_size = (200, 200)\n    # Open the picture and save it\n    pic = Image.open(pic_upload)",
        "detail": "users.picture_handler",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def register():\n    form = RegistrationForm()\n    if form.validate_on_submit():\n        user = User(email=form.email.data,\n                    username=form.username.data,\n                    password=form.password.data)\n        db.session.add(user)\n        db.session.commit()\n        flash('Thanks for registering! Now you can login!')\n        return redirect(url_for('users.login'))",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def login():\n    form = LoginForm()\n    if form.validate_on_submit():\n        # Grab the user from our User Models table\n        user = User.query.filter_by(email=form.email.data).first()\n        # Check that the user was supplied and the password is right\n        # The verify_password method comes from the User object\n        # https://stackoverflow.com/questions/2209755/python-operation-vs-is-not\n        if user.check_password(form.password.data) and user is not None:\n            #Log in the user",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def logout():\n    logout_user()\n    return redirect(url_for('core.index'))\n@users.route(\"/account\", methods=['GET', 'POST'])\n@login_required\ndef account():\n    form = UpdateUserForm()\n    if form.validate_on_submit():\n        print(form)\n        if form.picture.data:",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "account",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def account():\n    form = UpdateUserForm()\n    if form.validate_on_submit():\n        print(form)\n        if form.picture.data:\n            username = current_user.username\n            pic = add_profile_pic(form.picture.data,username)\n            current_user.profile_image = pic\n        current_user.username = form.username.data\n        current_user.email = form.email.data",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "user_posts",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def user_posts(username):\n    page = request.args.get('page', 1, type=int)\n    user = User.query.filter_by(username=username).first_or_404()\n    blog_posts = BlogPost.query.filter_by(author=user).order_by(BlogPost.date.desc()).paginate(page=page, per_page=5)\n    return render_template('user_blog_posts.html', blog_posts=blog_posts, user=user)",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 5,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "users = Blueprint('users', __name__)\n@users.route('/register', methods=['GET', 'POST'])\ndef register():\n    form = RegistrationForm()\n    if form.validate_on_submit():\n        user = User(email=form.email.data,\n                    username=form.username.data,\n                    password=form.password.data)\n        db.session.add(user)\n        db.session.commit()",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class User(db.Model, UserMixin):\n    # Create a table in the db\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key = True)\n    profile_image = db.Column(db.String(20), nullable=False, default='default_profile.png')\n    email = db.Column(db.String(64), unique=True, index=True)\n    username = db.Column(db.String(64), unique=True, index=True)\n    password_hash = db.Column(db.String(128))\n    # This connects BlogPosts to a User Author.\n    posts = db.relationship('BlogPost', backref='author', lazy=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "BlogPost",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class BlogPost(db.Model):\n    # Setup the relationship to the User table\n    users = db.relationship(User)\n    # Model for the Blog Posts on Website\n    id = db.Column(db.Integer, primary_key=True)\n    # Notice how we connect the BlogPost to a particular author\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    date = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\n    title = db.Column(db.String(140), nullable=False)\n    text = db.Column(db.Text, nullable=False)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "def load_user(user_id):\n    return User.query.get(user_id)\nclass User(db.Model, UserMixin):\n    # Create a table in the db\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key = True)\n    profile_image = db.Column(db.String(20), nullable=False, default='default_profile.png')\n    email = db.Column(db.String(64), unique=True, index=True)\n    username = db.Column(db.String(64), unique=True, index=True)\n    password_hash = db.Column(db.String(128))",
        "detail": "models",
        "documentation": {}
    }
]